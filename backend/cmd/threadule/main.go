package main

import (
	"flag"
	"github.com/google/logger"
	"io/ioutil"
	"log"
	"os"
	"threadule/backend/internal/app"
	"threadule/backend/internal/config"
	"threadule/backend/internal/data"
	"threadule/backend/internal/logic"
	"threadule/backend/internal/router"
	"threadule/backend/internal/web"
)

var configFile = flag.String("c", "config.toml", "path to config file (will be autogenerated if it doesn't yet exist)")

func main() {
	flag.Parse()

	cfg, err := config.Read(*configFile)
	if err != nil {
		log.Println("reading config file failed")
		log.Fatal(err)
	}

	ctx := &app.Context{
		Config:    cfg,
		Log:       logger.Init("message logger", true, false, ioutil.Discard),
		AccessLog: log.New(os.Stdout, "access", log.Ldate|log.Lmicroseconds|log.Lmsgprefix),
	}

	ctx.Log.Info("setting up persistence layer")
	ctx.Data, err = data.Setup(ctx)
	if err != nil {
		ctx.Log.Fatal("couldn't setup persistence layer")
	}

	ctx.Log.Info("setting up logic layer")
	ctx.Logic, err = logic.Setup(ctx)
	if err != nil {
		ctx.Log.Error("couldn't setup logic layer")
		ctx.Log.Fatal(err)
	}

	ctx.Log.Info("setting up routes")
	handler := router.Setup(ctx)
	err = web.StartServer(ctx, handler)
	if err != nil {
		ctx.Log.Error("couldn't start web server")
		ctx.Log.Fatal(err)
	}
}
